I0420 21:13:00.307765    32 caffe.cpp:217] Using GPUs 0
I0420 21:13:00.335537    32 caffe.cpp:222] GPU 0: GRID K520
I0420 21:13:00.513360    32 solver.cpp:48] Initializing solver from parameters: 
test_iter: 1
test_interval: 10000000
base_lr: 0.001
display: 20
max_iter: 40000
lr_policy: "step"
gamma: 1
momentum: 0.9
weight_decay: 0.0005
stepsize: 10000000
snapshot: 1000
snapshot_prefix: "/SegNet/Models/Training/segnet"
solver_mode: GPU
device_id: 0
net: "/SegNet/Models/segnet_basic_train.prototxt"
train_state {
  level: 0
  stage: ""
}
test_initialization: false
I0420 21:13:00.513566    32 solver.cpp:91] Creating training net from net file: /SegNet/Models/segnet_basic_train.prototxt
I0420 21:13:00.514384    32 net.cpp:58] Initializing net from parameters: 
name: "segnet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "data"
  type: "DenseImageData"
  top: "data"
  top: "label"
  dense_image_data_param {
    source: "/SegNet/CamVid/train.txt"
    batch_size: 4
    shuffle: true
  }
}
layer {
  name: "norm"
  type: "LRN"
  bottom: "data"
  top: "norm"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "norm"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 3
    kernel_size: 7
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "conv1_bn"
  type: "BN"
  bottom: "conv1"
  top: "conv1"
  bn_param {
    scale_filler {
      type: "constant"
      value: 1
    }
    shift_filler {
      type: "constant"
      value: 0.001
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  top: "pool1_mask"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 3
    kernel_size: 7
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "conv2_bn"
  type: "BN"
  bottom: "conv2"
  top: "conv2"
  bn_param {
    scale_filler {
      type: "constant"
      value: 1
    }
    shift_filler {
      type: "constant"
      value: 0.001
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  top: "pool2_mask"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 3
    kernel_size: 7
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "conv3_bn"
  type: "BN"
  bottom: "conv3"
  top: "conv3"
  bn_param {
    scale_filler {
      type: "constant"
      value: 1
    }
    shift_filler {
      type: "constant"
      value: 0.001
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3"
  top: "pool3"
  top: "pool3_mask"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 3
    kernel_size: 7
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "conv4_bn"
  type: "BN"
  bottom: "conv4"
  top: "conv4"
  bn_param {
    scale_filler {
      type: "constant"
      value: 1
    }
    shift_filler {
      type: "constant"
      value: 0.001
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv4"
  top: "pool4"
  top: "pool4_mask"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "upsample4"
  type: "Upsample"
  bottom: "pool4"
  bottom: "pool4_mask"
  top: "upsample4"
  upsample_param {
    scale: 2
    pad_out_h: true
  }
}
layer {
  name: "conv_decode4"
  type: "Convolution"
  bottom: "upsample4"
  top: "conv_decode4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 3
    kernel_size: 7
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "conv_decode4_bn"
  type: "BN"
  bottom: "conv_decode4"
  top: "conv_decode4"
  bn_param {
    scale_filler {
      type: "constant"
      value: 1
    }
    shift_filler {
      type: "constant"
      value: 0.001
    }
  }
}
layer {
  name: "upsample3"
  type: "Upsample"
  bottom: "conv_decode4"
  bottom: "pool3_mask"
  top: "upsample3"
  upsample_param {
    scale: 2
  }
}
layer {
  name: "conv_decode3"
  type: "Convolution"
  bottom: "upsample3"
  top: "conv_decode3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 3
    kernel_size: 7
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "conv_decode3_bn"
  type: "BN"
  bottom: "conv_decode3"
  top: "conv_decode3"
  bn_param {
    scale_filler {
      type: "constant"
      value: 1
    }
    shift_filler {
      type: "constant"
      value: 0.001
    }
  }
}
layer {
  name: "upsample2"
  type: "Upsample"
  bottom: "conv_decode3"
  bottom: "pool2_mask"
  top: "upsample2"
  upsample_param {
    scale: 2
  }
}
layer {
  name: "conv_decode2"
  type: "Convolution"
  bottom: "upsample2"
  top: "conv_decode2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 3
    kernel_size: 7
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "conv_decode2_bn"
  type: "BN"
  bottom: "conv_decode2"
  top: "conv_decode2"
  bn_param {
    scale_filler {
      type: "constant"
      value: 1
    }
    shift_filler {
      type: "constant"
      value: 0.001
    }
  }
}
layer {
  name: "upsample1"
  type: "Upsample"
  bottom: "conv_decode2"
  bottom: "pool1_mask"
  top: "upsample1"
  upsample_param {
    scale: 2
  }
}
layer {
  name: "conv_decode1"
  type: "Convolution"
  bottom: "upsample1"
  top: "conv_decode1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 3
    kernel_size: 7
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "conv_decode1_bn"
  type: "BN"
  bottom: "conv_decode1"
  top: "conv_decode1"
  bn_param {
    scale_filler {
      type: "constant"
      value: 1
    }
    shift_filler {
      type: "constant"
      value: 0.001
    }
  }
}
layer {
  name: "conv_classifier"
  type: "Convolution"
  bottom: "conv_decode1"
  top: "conv_classifier"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 11
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "conv_classifier"
  bottom: "label"
  top: "loss"
  loss_param {
    ignore_label: 11
    weight_by_label_freqs: true
    class_weighting: 0.2595
    class_weighting: 0.1826
    class_weighting: 4.564
    class_weighting: 0.1417
    class_weighting: 0.9051
    class_weighting: 0.3826
    class_weighting: 9.6446
    class_weighting: 1.8418
    class_weighting: 0.6823
    class_weighting: 6.2478
    class_weighting: 7.3614
  }
  softmax_param {
    engine: CAFFE
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "conv_classifier"
  bottom: "label"
  top: "accuracy"
  top: "per_class_accuracy"
}
I0420 21:13:00.514628    32 layer_factory.hpp:77] Creating layer data
I0420 21:13:00.514654    32 net.cpp:100] Creating Layer data
I0420 21:13:00.514664    32 net.cpp:408] data -> data
I0420 21:13:00.514689    32 net.cpp:408] data -> label
I0420 21:13:00.514716    32 dense_image_data_layer.cpp:49] Opening file /SegNet/CamVid/train.txt
I0420 21:13:00.516616    32 dense_image_data_layer.cpp:59] Shuffling data
I0420 21:13:00.517030    32 dense_image_data_layer.cpp:64] A total of 367 examples.
I0420 21:13:00.543534    32 dense_image_data_layer.cpp:117] output data size: 4,3,360,480
I0420 21:13:00.549285    32 net.cpp:150] Setting up data
I0420 21:13:00.549329    32 net.cpp:157] Top shape: 4 3 360 480 (2073600)
I0420 21:13:00.549337    32 net.cpp:157] Top shape: 4 1 360 480 (691200)
I0420 21:13:00.549342    32 net.cpp:165] Memory required for data: 11059200
I0420 21:13:00.549355    32 layer_factory.hpp:77] Creating layer label_data_1_split
I0420 21:13:00.549379    32 net.cpp:100] Creating Layer label_data_1_split
I0420 21:13:00.549391    32 net.cpp:434] label_data_1_split <- label
I0420 21:13:00.549414    32 net.cpp:408] label_data_1_split -> label_data_1_split_0
I0420 21:13:00.549445    32 net.cpp:408] label_data_1_split -> label_data_1_split_1
I0420 21:13:00.549523    32 net.cpp:150] Setting up label_data_1_split
I0420 21:13:00.549597    32 net.cpp:157] Top shape: 4 1 360 480 (691200)
I0420 21:13:00.549640    32 net.cpp:157] Top shape: 4 1 360 480 (691200)
I0420 21:13:00.549676    32 net.cpp:165] Memory required for data: 16588800
I0420 21:13:00.549713    32 layer_factory.hpp:77] Creating layer norm
I0420 21:13:00.549767    32 net.cpp:100] Creating Layer norm
I0420 21:13:00.549788    32 net.cpp:434] norm <- data
I0420 21:13:00.549804    32 net.cpp:408] norm -> norm
I0420 21:13:00.758568    32 net.cpp:150] Setting up norm
I0420 21:13:00.758630    32 net.cpp:157] Top shape: 4 3 360 480 (2073600)
I0420 21:13:00.758637    32 net.cpp:165] Memory required for data: 24883200
I0420 21:13:00.758648    32 layer_factory.hpp:77] Creating layer conv1
I0420 21:13:00.758682    32 net.cpp:100] Creating Layer conv1
I0420 21:13:00.758697    32 net.cpp:434] conv1 <- norm
I0420 21:13:00.758713    32 net.cpp:408] conv1 -> conv1
I0420 21:13:00.761226    32 net.cpp:150] Setting up conv1
I0420 21:13:00.761252    32 net.cpp:157] Top shape: 4 64 360 480 (44236800)
I0420 21:13:00.761258    32 net.cpp:165] Memory required for data: 201830400
I0420 21:13:00.761287    32 layer_factory.hpp:77] Creating layer conv1_bn
I0420 21:13:00.761306    32 net.cpp:100] Creating Layer conv1_bn
I0420 21:13:00.761312    32 net.cpp:434] conv1_bn <- conv1
I0420 21:13:00.761319    32 net.cpp:395] conv1_bn -> conv1 (in-place)
I0420 21:13:00.762902    32 net.cpp:150] Setting up conv1_bn
I0420 21:13:00.762928    32 net.cpp:157] Top shape: 4 64 360 480 (44236800)
I0420 21:13:00.762934    32 net.cpp:165] Memory required for data: 378777600
I0420 21:13:00.762948    32 layer_factory.hpp:77] Creating layer relu1
I0420 21:13:00.762959    32 net.cpp:100] Creating Layer relu1
I0420 21:13:00.762964    32 net.cpp:434] relu1 <- conv1
I0420 21:13:00.762974    32 net.cpp:395] relu1 -> conv1 (in-place)
I0420 21:13:00.763335    32 net.cpp:150] Setting up relu1
I0420 21:13:00.763366    32 net.cpp:157] Top shape: 4 64 360 480 (44236800)
I0420 21:13:00.763376    32 net.cpp:165] Memory required for data: 555724800
I0420 21:13:00.763394    32 layer_factory.hpp:77] Creating layer pool1
I0420 21:13:00.763406    32 layer_factory.cpp:91] cuDNN does not support multiple tops. Using Caffe's own pooling layer.
I0420 21:13:00.763428    32 net.cpp:100] Creating Layer pool1
I0420 21:13:00.763447    32 net.cpp:434] pool1 <- conv1
I0420 21:13:00.763463    32 net.cpp:408] pool1 -> pool1
I0420 21:13:00.763492    32 net.cpp:408] pool1 -> pool1_mask
I0420 21:13:00.763574    32 net.cpp:150] Setting up pool1
I0420 21:13:00.763610    32 net.cpp:157] Top shape: 4 64 180 240 (11059200)
I0420 21:13:00.763655    32 net.cpp:157] Top shape: 4 64 180 240 (11059200)
I0420 21:13:00.763670    32 net.cpp:165] Memory required for data: 644198400
I0420 21:13:00.763680    32 layer_factory.hpp:77] Creating layer conv2
I0420 21:13:00.763701    32 net.cpp:100] Creating Layer conv2
I0420 21:13:00.763720    32 net.cpp:434] conv2 <- pool1
I0420 21:13:00.763736    32 net.cpp:408] conv2 -> conv2
I0420 21:13:00.768316    32 net.cpp:150] Setting up conv2
I0420 21:13:00.768345    32 net.cpp:157] Top shape: 4 64 180 240 (11059200)
I0420 21:13:00.768352    32 net.cpp:165] Memory required for data: 688435200
I0420 21:13:00.768366    32 layer_factory.hpp:77] Creating layer conv2_bn
I0420 21:13:00.768389    32 net.cpp:100] Creating Layer conv2_bn
I0420 21:13:00.768399    32 net.cpp:434] conv2_bn <- conv2
I0420 21:13:00.768407    32 net.cpp:395] conv2_bn -> conv2 (in-place)
I0420 21:13:00.768733    32 net.cpp:150] Setting up conv2_bn
I0420 21:13:00.768760    32 net.cpp:157] Top shape: 4 64 180 240 (11059200)
I0420 21:13:00.768770    32 net.cpp:165] Memory required for data: 732672000
I0420 21:13:00.768786    32 layer_factory.hpp:77] Creating layer relu2
I0420 21:13:00.768810    32 net.cpp:100] Creating Layer relu2
I0420 21:13:00.768821    32 net.cpp:434] relu2 <- conv2
I0420 21:13:00.768841    32 net.cpp:395] relu2 -> conv2 (in-place)
I0420 21:13:00.769033    32 net.cpp:150] Setting up relu2
I0420 21:13:00.769057    32 net.cpp:157] Top shape: 4 64 180 240 (11059200)
I0420 21:13:00.769062    32 net.cpp:165] Memory required for data: 776908800
I0420 21:13:00.769068    32 layer_factory.hpp:77] Creating layer pool2
I0420 21:13:00.769074    32 layer_factory.cpp:91] cuDNN does not support multiple tops. Using Caffe's own pooling layer.
I0420 21:13:00.769083    32 net.cpp:100] Creating Layer pool2
I0420 21:13:00.769090    32 net.cpp:434] pool2 <- conv2
I0420 21:13:00.769104    32 net.cpp:408] pool2 -> pool2
I0420 21:13:00.769117    32 net.cpp:408] pool2 -> pool2_mask
I0420 21:13:00.769191    32 net.cpp:150] Setting up pool2
I0420 21:13:00.769218    32 net.cpp:157] Top shape: 4 64 90 120 (2764800)
I0420 21:13:00.769232    32 net.cpp:157] Top shape: 4 64 90 120 (2764800)
I0420 21:13:00.769240    32 net.cpp:165] Memory required for data: 799027200
I0420 21:13:00.769250    32 layer_factory.hpp:77] Creating layer conv3
I0420 21:13:00.769273    32 net.cpp:100] Creating Layer conv3
I0420 21:13:00.769284    32 net.cpp:434] conv3 <- pool2
I0420 21:13:00.769301    32 net.cpp:408] conv3 -> conv3
I0420 21:13:00.773509    32 net.cpp:150] Setting up conv3
I0420 21:13:00.773536    32 net.cpp:157] Top shape: 4 64 90 120 (2764800)
I0420 21:13:00.773543    32 net.cpp:165] Memory required for data: 810086400
I0420 21:13:00.773558    32 layer_factory.hpp:77] Creating layer conv3_bn
I0420 21:13:00.773597    32 net.cpp:100] Creating Layer conv3_bn
I0420 21:13:00.773612    32 net.cpp:434] conv3_bn <- conv3
I0420 21:13:00.773622    32 net.cpp:395] conv3_bn -> conv3 (in-place)
I0420 21:13:00.773962    32 net.cpp:150] Setting up conv3_bn
I0420 21:13:00.773991    32 net.cpp:157] Top shape: 4 64 90 120 (2764800)
I0420 21:13:00.774001    32 net.cpp:165] Memory required for data: 821145600
I0420 21:13:00.774018    32 layer_factory.hpp:77] Creating layer relu3
I0420 21:13:00.774034    32 net.cpp:100] Creating Layer relu3
I0420 21:13:00.774044    32 net.cpp:434] relu3 <- conv3
I0420 21:13:00.774065    32 net.cpp:395] relu3 -> conv3 (in-place)
I0420 21:13:00.774289    32 net.cpp:150] Setting up relu3
I0420 21:13:00.774315    32 net.cpp:157] Top shape: 4 64 90 120 (2764800)
I0420 21:13:00.774325    32 net.cpp:165] Memory required for data: 832204800
I0420 21:13:00.774345    32 layer_factory.hpp:77] Creating layer pool3
I0420 21:13:00.774395    32 layer_factory.cpp:91] cuDNN does not support multiple tops. Using Caffe's own pooling layer.
I0420 21:13:00.774423    32 net.cpp:100] Creating Layer pool3
I0420 21:13:00.774433    32 net.cpp:434] pool3 <- conv3
I0420 21:13:00.774449    32 net.cpp:408] pool3 -> pool3
I0420 21:13:00.774477    32 net.cpp:408] pool3 -> pool3_mask
I0420 21:13:00.774577    32 net.cpp:150] Setting up pool3
I0420 21:13:00.774605    32 net.cpp:157] Top shape: 4 64 45 60 (691200)
I0420 21:13:00.774617    32 net.cpp:157] Top shape: 4 64 45 60 (691200)
I0420 21:13:00.774626    32 net.cpp:165] Memory required for data: 837734400
I0420 21:13:00.774636    32 layer_factory.hpp:77] Creating layer conv4
I0420 21:13:00.774660    32 net.cpp:100] Creating Layer conv4
I0420 21:13:00.774673    32 net.cpp:434] conv4 <- pool3
I0420 21:13:00.774689    32 net.cpp:408] conv4 -> conv4
I0420 21:13:00.779361    32 net.cpp:150] Setting up conv4
I0420 21:13:00.779386    32 net.cpp:157] Top shape: 4 64 45 60 (691200)
I0420 21:13:00.779392    32 net.cpp:165] Memory required for data: 840499200
I0420 21:13:00.779403    32 layer_factory.hpp:77] Creating layer conv4_bn
I0420 21:13:00.779420    32 net.cpp:100] Creating Layer conv4_bn
I0420 21:13:00.779433    32 net.cpp:434] conv4_bn <- conv4
I0420 21:13:00.779443    32 net.cpp:395] conv4_bn -> conv4 (in-place)
I0420 21:13:00.779727    32 net.cpp:150] Setting up conv4_bn
I0420 21:13:00.779755    32 net.cpp:157] Top shape: 4 64 45 60 (691200)
I0420 21:13:00.779765    32 net.cpp:165] Memory required for data: 843264000
I0420 21:13:00.779781    32 layer_factory.hpp:77] Creating layer relu4
I0420 21:13:00.779804    32 net.cpp:100] Creating Layer relu4
I0420 21:13:00.779815    32 net.cpp:434] relu4 <- conv4
I0420 21:13:00.779829    32 net.cpp:395] relu4 -> conv4 (in-place)
I0420 21:13:00.780210    32 net.cpp:150] Setting up relu4
I0420 21:13:00.780237    32 net.cpp:157] Top shape: 4 64 45 60 (691200)
I0420 21:13:00.780247    32 net.cpp:165] Memory required for data: 846028800
I0420 21:13:00.780257    32 layer_factory.hpp:77] Creating layer pool4
I0420 21:13:00.780268    32 layer_factory.cpp:91] cuDNN does not support multiple tops. Using Caffe's own pooling layer.
I0420 21:13:00.780287    32 net.cpp:100] Creating Layer pool4
I0420 21:13:00.780298    32 net.cpp:434] pool4 <- conv4
I0420 21:13:00.780313    32 net.cpp:408] pool4 -> pool4
I0420 21:13:00.780330    32 net.cpp:408] pool4 -> pool4_mask
I0420 21:13:00.780405    32 net.cpp:150] Setting up pool4
I0420 21:13:00.780428    32 net.cpp:157] Top shape: 4 64 23 30 (176640)
I0420 21:13:00.780441    32 net.cpp:157] Top shape: 4 64 23 30 (176640)
I0420 21:13:00.780452    32 net.cpp:165] Memory required for data: 847441920
I0420 21:13:00.780462    32 layer_factory.hpp:77] Creating layer upsample4
I0420 21:13:00.780483    32 net.cpp:100] Creating Layer upsample4
I0420 21:13:00.780506    32 net.cpp:434] upsample4 <- pool4
I0420 21:13:00.780520    32 net.cpp:434] upsample4 <- pool4_mask
I0420 21:13:00.780539    32 net.cpp:408] upsample4 -> upsample4
I0420 21:13:00.780570    32 upsample_layer.cpp:27] Params 'pad_out_{}_' are deprecated. Please declare upsample height and width useing the upsample_h, upsample_w parameters.
I0420 21:13:00.780630    32 net.cpp:150] Setting up upsample4
I0420 21:13:00.780652    32 net.cpp:157] Top shape: 4 64 45 60 (691200)
I0420 21:13:00.780661    32 net.cpp:165] Memory required for data: 850206720
I0420 21:13:00.780671    32 layer_factory.hpp:77] Creating layer conv_decode4
I0420 21:13:00.780695    32 net.cpp:100] Creating Layer conv_decode4
I0420 21:13:00.780711    32 net.cpp:434] conv_decode4 <- upsample4
I0420 21:13:00.780740    32 net.cpp:408] conv_decode4 -> conv_decode4
I0420 21:13:00.784510    32 net.cpp:150] Setting up conv_decode4
I0420 21:13:00.784538    32 net.cpp:157] Top shape: 4 64 45 60 (691200)
I0420 21:13:00.784548    32 net.cpp:165] Memory required for data: 852971520
I0420 21:13:00.784577    32 layer_factory.hpp:77] Creating layer conv_decode4_bn
I0420 21:13:00.784603    32 net.cpp:100] Creating Layer conv_decode4_bn
I0420 21:13:00.784620    32 net.cpp:434] conv_decode4_bn <- conv_decode4
I0420 21:13:00.784636    32 net.cpp:395] conv_decode4_bn -> conv_decode4 (in-place)
I0420 21:13:00.784871    32 net.cpp:150] Setting up conv_decode4_bn
I0420 21:13:00.784895    32 net.cpp:157] Top shape: 4 64 45 60 (691200)
I0420 21:13:00.784904    32 net.cpp:165] Memory required for data: 855736320
I0420 21:13:00.784958    32 layer_factory.hpp:77] Creating layer upsample3
I0420 21:13:00.784986    32 net.cpp:100] Creating Layer upsample3
I0420 21:13:00.785006    32 net.cpp:434] upsample3 <- conv_decode4
I0420 21:13:00.785019    32 net.cpp:434] upsample3 <- pool3_mask
I0420 21:13:00.785049    32 net.cpp:408] upsample3 -> upsample3
I0420 21:13:00.785068    32 upsample_layer.cpp:27] Params 'pad_out_{}_' are deprecated. Please declare upsample height and width useing the upsample_h, upsample_w parameters.
I0420 21:13:00.785128    32 net.cpp:150] Setting up upsample3
I0420 21:13:00.785156    32 net.cpp:157] Top shape: 4 64 90 120 (2764800)
I0420 21:13:00.785166    32 net.cpp:165] Memory required for data: 866795520
I0420 21:13:00.785178    32 layer_factory.hpp:77] Creating layer conv_decode3
I0420 21:13:00.785202    32 net.cpp:100] Creating Layer conv_decode3
I0420 21:13:00.785223    32 net.cpp:434] conv_decode3 <- upsample3
I0420 21:13:00.785240    32 net.cpp:408] conv_decode3 -> conv_decode3
I0420 21:13:00.788898    32 net.cpp:150] Setting up conv_decode3
I0420 21:13:00.788925    32 net.cpp:157] Top shape: 4 64 90 120 (2764800)
I0420 21:13:00.788936    32 net.cpp:165] Memory required for data: 877854720
I0420 21:13:00.788954    32 layer_factory.hpp:77] Creating layer conv_decode3_bn
I0420 21:13:00.788976    32 net.cpp:100] Creating Layer conv_decode3_bn
I0420 21:13:00.788991    32 net.cpp:434] conv_decode3_bn <- conv_decode3
I0420 21:13:00.789006    32 net.cpp:395] conv_decode3_bn -> conv_decode3 (in-place)
I0420 21:13:00.789285    32 net.cpp:150] Setting up conv_decode3_bn
I0420 21:13:00.789309    32 net.cpp:157] Top shape: 4 64 90 120 (2764800)
I0420 21:13:00.789319    32 net.cpp:165] Memory required for data: 888913920
I0420 21:13:00.789336    32 layer_factory.hpp:77] Creating layer upsample2
I0420 21:13:00.789353    32 net.cpp:100] Creating Layer upsample2
I0420 21:13:00.789367    32 net.cpp:434] upsample2 <- conv_decode3
I0420 21:13:00.789379    32 net.cpp:434] upsample2 <- pool2_mask
I0420 21:13:00.789396    32 net.cpp:408] upsample2 -> upsample2
I0420 21:13:00.789417    32 upsample_layer.cpp:27] Params 'pad_out_{}_' are deprecated. Please declare upsample height and width useing the upsample_h, upsample_w parameters.
I0420 21:13:00.789470    32 net.cpp:150] Setting up upsample2
I0420 21:13:00.789491    32 net.cpp:157] Top shape: 4 64 180 240 (11059200)
I0420 21:13:00.789500    32 net.cpp:165] Memory required for data: 933150720
I0420 21:13:00.789511    32 layer_factory.hpp:77] Creating layer conv_decode2
I0420 21:13:00.789551    32 net.cpp:100] Creating Layer conv_decode2
I0420 21:13:00.789571    32 net.cpp:434] conv_decode2 <- upsample2
I0420 21:13:00.789592    32 net.cpp:408] conv_decode2 -> conv_decode2
I0420 21:13:00.793349    32 net.cpp:150] Setting up conv_decode2
I0420 21:13:00.793378    32 net.cpp:157] Top shape: 4 64 180 240 (11059200)
I0420 21:13:00.793390    32 net.cpp:165] Memory required for data: 977387520
I0420 21:13:00.793406    32 layer_factory.hpp:77] Creating layer conv_decode2_bn
I0420 21:13:00.793438    32 net.cpp:100] Creating Layer conv_decode2_bn
I0420 21:13:00.793452    32 net.cpp:434] conv_decode2_bn <- conv_decode2
I0420 21:13:00.793473    32 net.cpp:395] conv_decode2_bn -> conv_decode2 (in-place)
I0420 21:13:00.793807    32 net.cpp:150] Setting up conv_decode2_bn
I0420 21:13:00.793831    32 net.cpp:157] Top shape: 4 64 180 240 (11059200)
I0420 21:13:00.793841    32 net.cpp:165] Memory required for data: 1021624320
I0420 21:13:00.793859    32 layer_factory.hpp:77] Creating layer upsample1
I0420 21:13:00.793877    32 net.cpp:100] Creating Layer upsample1
I0420 21:13:00.793889    32 net.cpp:434] upsample1 <- conv_decode2
I0420 21:13:00.793905    32 net.cpp:434] upsample1 <- pool1_mask
I0420 21:13:00.793925    32 net.cpp:408] upsample1 -> upsample1
I0420 21:13:00.793946    32 upsample_layer.cpp:27] Params 'pad_out_{}_' are deprecated. Please declare upsample height and width useing the upsample_h, upsample_w parameters.
I0420 21:13:00.794020    32 net.cpp:150] Setting up upsample1
I0420 21:13:00.794045    32 net.cpp:157] Top shape: 4 64 360 480 (44236800)
I0420 21:13:00.794055    32 net.cpp:165] Memory required for data: 1198571520
I0420 21:13:00.794066    32 layer_factory.hpp:77] Creating layer conv_decode1
I0420 21:13:00.794092    32 net.cpp:100] Creating Layer conv_decode1
I0420 21:13:00.794107    32 net.cpp:434] conv_decode1 <- upsample1
I0420 21:13:00.794128    32 net.cpp:408] conv_decode1 -> conv_decode1
I0420 21:13:00.798662    32 net.cpp:150] Setting up conv_decode1
I0420 21:13:00.798693    32 net.cpp:157] Top shape: 4 64 360 480 (44236800)
I0420 21:13:00.798704    32 net.cpp:165] Memory required for data: 1375518720
I0420 21:13:00.798722    32 layer_factory.hpp:77] Creating layer conv_decode1_bn
I0420 21:13:00.798745    32 net.cpp:100] Creating Layer conv_decode1_bn
I0420 21:13:00.798760    32 net.cpp:434] conv_decode1_bn <- conv_decode1
I0420 21:13:00.798775    32 net.cpp:395] conv_decode1_bn -> conv_decode1 (in-place)
I0420 21:13:00.800225    32 net.cpp:150] Setting up conv_decode1_bn
I0420 21:13:00.800256    32 net.cpp:157] Top shape: 4 64 360 480 (44236800)
I0420 21:13:00.800266    32 net.cpp:165] Memory required for data: 1552465920
I0420 21:13:00.800283    32 layer_factory.hpp:77] Creating layer conv_classifier
I0420 21:13:00.800309    32 net.cpp:100] Creating Layer conv_classifier
I0420 21:13:00.800329    32 net.cpp:434] conv_classifier <- conv_decode1
I0420 21:13:00.800348    32 net.cpp:408] conv_classifier -> conv_classifier
I0420 21:13:00.802700    32 net.cpp:150] Setting up conv_classifier
I0420 21:13:00.802726    32 net.cpp:157] Top shape: 4 11 360 480 (7603200)
I0420 21:13:00.802737    32 net.cpp:165] Memory required for data: 1582878720
I0420 21:13:00.802767    32 layer_factory.hpp:77] Creating layer conv_classifier_conv_classifier_0_split
I0420 21:13:00.802806    32 net.cpp:100] Creating Layer conv_classifier_conv_classifier_0_split
I0420 21:13:00.802829    32 net.cpp:434] conv_classifier_conv_classifier_0_split <- conv_classifier
I0420 21:13:00.802846    32 net.cpp:408] conv_classifier_conv_classifier_0_split -> conv_classifier_conv_classifier_0_split_0
I0420 21:13:00.802867    32 net.cpp:408] conv_classifier_conv_classifier_0_split -> conv_classifier_conv_classifier_0_split_1
I0420 21:13:00.802958    32 net.cpp:150] Setting up conv_classifier_conv_classifier_0_split
I0420 21:13:00.802981    32 net.cpp:157] Top shape: 4 11 360 480 (7603200)
I0420 21:13:00.802994    32 net.cpp:157] Top shape: 4 11 360 480 (7603200)
I0420 21:13:00.803002    32 net.cpp:165] Memory required for data: 1643704320
I0420 21:13:00.803014    32 layer_factory.hpp:77] Creating layer loss
I0420 21:13:00.803035    32 net.cpp:100] Creating Layer loss
I0420 21:13:00.803050    32 net.cpp:434] loss <- conv_classifier_conv_classifier_0_split_0
I0420 21:13:00.803067    32 net.cpp:434] loss <- label_data_1_split_0
I0420 21:13:00.803088    32 net.cpp:408] loss -> loss
I0420 21:13:00.803123    32 layer_factory.hpp:77] Creating layer loss
I0420 21:13:00.825016    32 net.cpp:150] Setting up loss
I0420 21:13:00.825095    32 net.cpp:157] Top shape: (1)
I0420 21:13:00.825105    32 net.cpp:160]     with loss weight 1
I0420 21:13:00.825165    32 net.cpp:165] Memory required for data: 1643704324
I0420 21:13:00.825181    32 layer_factory.hpp:77] Creating layer accuracy
I0420 21:13:00.825206    32 net.cpp:100] Creating Layer accuracy
I0420 21:13:00.825229    32 net.cpp:434] accuracy <- conv_classifier_conv_classifier_0_split_1
I0420 21:13:00.825248    32 net.cpp:434] accuracy <- label_data_1_split_1
I0420 21:13:00.825270    32 net.cpp:408] accuracy -> accuracy
I0420 21:13:00.825296    32 net.cpp:408] accuracy -> per_class_accuracy
I0420 21:13:00.825420    32 net.cpp:150] Setting up accuracy
I0420 21:13:00.825443    32 net.cpp:157] Top shape: (1)
I0420 21:13:00.825456    32 net.cpp:157] Top shape: 11 (11)
I0420 21:13:00.825482    32 net.cpp:165] Memory required for data: 1643704372
I0420 21:13:00.825495    32 net.cpp:228] accuracy does not need backward computation.
I0420 21:13:00.825551    32 net.cpp:226] loss needs backward computation.
I0420 21:13:00.825567    32 net.cpp:226] conv_classifier_conv_classifier_0_split needs backward computation.
I0420 21:13:00.825604    32 net.cpp:226] conv_classifier needs backward computation.
I0420 21:13:00.825618    32 net.cpp:226] conv_decode1_bn needs backward computation.
I0420 21:13:00.825628    32 net.cpp:226] conv_decode1 needs backward computation.
I0420 21:13:00.825639    32 net.cpp:226] upsample1 needs backward computation.
I0420 21:13:00.825649    32 net.cpp:226] conv_decode2_bn needs backward computation.
I0420 21:13:00.825659    32 net.cpp:226] conv_decode2 needs backward computation.
I0420 21:13:00.825670    32 net.cpp:226] upsample2 needs backward computation.
I0420 21:13:00.825685    32 net.cpp:226] conv_decode3_bn needs backward computation.
I0420 21:13:00.825700    32 net.cpp:226] conv_decode3 needs backward computation.
I0420 21:13:00.825712    32 net.cpp:226] upsample3 needs backward computation.
I0420 21:13:00.825726    32 net.cpp:226] conv_decode4_bn needs backward computation.
I0420 21:13:00.825736    32 net.cpp:226] conv_decode4 needs backward computation.
I0420 21:13:00.825747    32 net.cpp:226] upsample4 needs backward computation.
I0420 21:13:00.825760    32 net.cpp:226] pool4 needs backward computation.
I0420 21:13:00.825772    32 net.cpp:226] relu4 needs backward computation.
I0420 21:13:00.825783    32 net.cpp:226] conv4_bn needs backward computation.
I0420 21:13:00.825793    32 net.cpp:226] conv4 needs backward computation.
I0420 21:13:00.825806    32 net.cpp:226] pool3 needs backward computation.
I0420 21:13:00.825817    32 net.cpp:226] relu3 needs backward computation.
I0420 21:13:00.825827    32 net.cpp:226] conv3_bn needs backward computation.
I0420 21:13:00.825836    32 net.cpp:226] conv3 needs backward computation.
I0420 21:13:00.825846    32 net.cpp:226] pool2 needs backward computation.
I0420 21:13:00.825857    32 net.cpp:226] relu2 needs backward computation.
I0420 21:13:00.825867    32 net.cpp:226] conv2_bn needs backward computation.
I0420 21:13:00.825877    32 net.cpp:226] conv2 needs backward computation.
I0420 21:13:00.825888    32 net.cpp:226] pool1 needs backward computation.
I0420 21:13:00.825898    32 net.cpp:226] relu1 needs backward computation.
I0420 21:13:00.825911    32 net.cpp:226] conv1_bn needs backward computation.
I0420 21:13:00.825920    32 net.cpp:226] conv1 needs backward computation.
I0420 21:13:00.825932    32 net.cpp:228] norm does not need backward computation.
I0420 21:13:00.825942    32 net.cpp:228] label_data_1_split does not need backward computation.
I0420 21:13:00.825956    32 net.cpp:228] data does not need backward computation.
I0420 21:13:00.825966    32 net.cpp:270] This network produces output accuracy
I0420 21:13:00.825976    32 net.cpp:270] This network produces output loss
I0420 21:13:00.825989    32 net.cpp:270] This network produces output per_class_accuracy
I0420 21:13:00.826037    32 net.cpp:283] Network initialization done.
I0420 21:13:00.826546    32 solver.cpp:181] Creating test net (#0) specified by net file: /SegNet/Models/segnet_basic_train.prototxt
I0420 21:13:00.826872    32 net.cpp:58] Initializing net from parameters: 
name: "segnet"
state {
  phase: TEST
}
layer {
  name: "data"
  type: "DenseImageData"
  top: "data"
  top: "label"
  dense_image_data_param {
    source: "/SegNet/CamVid/train.txt"
    batch_size: 4
    shuffle: true
  }
}
layer {
  name: "norm"
  type: "LRN"
  bottom: "data"
  top: "norm"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "norm"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 3
    kernel_size: 7
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "conv1_bn"
  type: "BN"
  bottom: "conv1"
  top: "conv1"
  bn_param {
    scale_filler {
      type: "constant"
      value: 1
    }
    shift_filler {
      type: "constant"
      value: 0.001
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  top: "pool1_mask"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 3
    kernel_size: 7
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "conv2_bn"
  type: "BN"
  bottom: "conv2"
  top: "conv2"
  bn_param {
    scale_filler {
      type: "constant"
      value: 1
    }
    shift_filler {
      type: "constant"
      value: 0.001
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  top: "pool2_mask"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 3
    kernel_size: 7
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "conv3_bn"
  type: "BN"
  bottom: "conv3"
  top: "conv3"
  bn_param {
    scale_filler {
      type: "constant"
      value: 1
    }
    shift_filler {
      type: "constant"
      value: 0.001
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3"
  top: "pool3"
  top: "pool3_mask"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 3
    kernel_size: 7
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "conv4_bn"
  type: "BN"
  bottom: "conv4"
  top: "conv4"
  bn_param {
    scale_filler {
      type: "constant"
      value: 1
    }
    shift_filler {
      type: "constant"
      value: 0.001
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv4"
  top: "pool4"
  top: "pool4_mask"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "upsample4"
  type: "Upsample"
  bottom: "pool4"
  bottom: "pool4_mask"
  top: "upsample4"
  upsample_param {
    scale: 2
    pad_out_h: true
  }
}
layer {
  name: "conv_decode4"
  type: "Convolution"
  bottom: "upsample4"
  top: "conv_decode4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 3
    kernel_size: 7
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "conv_decode4_bn"
  type: "BN"
  bottom: "conv_decode4"
  top: "conv_decode4"
  bn_param {
    scale_filler {
      type: "constant"
      value: 1
    }
    shift_filler {
      type: "constant"
      value: 0.001
    }
  }
}
layer {
  name: "upsample3"
  type: "Upsample"
  bottom: "conv_decode4"
  bottom: "pool3_mask"
  top: "upsample3"
  upsample_param {
    scale: 2
  }
}
layer {
  name: "conv_decode3"
  type: "Convolution"
  bottom: "upsample3"
  top: "conv_decode3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 3
    kernel_size: 7
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "conv_decode3_bn"
  type: "BN"
  bottom: "conv_decode3"
  top: "conv_decode3"
  bn_param {
    scale_filler {
      type: "constant"
      value: 1
    }
    shift_filler {
      type: "constant"
      value: 0.001
    }
  }
}
layer {
  name: "upsample2"
  type: "Upsample"
  bottom: "conv_decode3"
  bottom: "pool2_mask"
  top: "upsample2"
  upsample_param {
    scale: 2
  }
}
layer {
  name: "conv_decode2"
  type: "Convolution"
  bottom: "upsample2"
  top: "conv_decode2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 3
    kernel_size: 7
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "conv_decode2_bn"
  type: "BN"
  bottom: "conv_decode2"
  top: "conv_decode2"
  bn_param {
    scale_filler {
      type: "constant"
      value: 1
    }
    shift_filler {
      type: "constant"
      value: 0.001
    }
  }
}
layer {
  name: "upsample1"
  type: "Upsample"
  bottom: "conv_decode2"
  bottom: "pool1_mask"
  top: "upsample1"
  upsample_param {
    scale: 2
  }
}
layer {
  name: "conv_decode1"
  type: "Convolution"
  bottom: "upsample1"
  top: "conv_decode1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 3
    kernel_size: 7
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "conv_decode1_bn"
  type: "BN"
  bottom: "conv_decode1"
  top: "conv_decode1"
  bn_param {
    scale_filler {
      type: "constant"
      value: 1
    }
    shift_filler {
      type: "constant"
      value: 0.001
    }
  }
}
layer {
  name: "conv_classifier"
  type: "Convolution"
  bottom: "conv_decode1"
  top: "conv_classifier"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 11
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "conv_classifier"
  bottom: "label"
  top: "loss"
  loss_param {
    ignore_label: 11
    weight_by_label_freqs: true
    class_weighting: 0.2595
    class_weighting: 0.1826
    class_weighting: 4.564
    class_weighting: 0.1417
    class_weighting: 0.9051
    class_weighting: 0.3826
    class_weighting: 9.6446
    class_weighting: 1.8418
    class_weighting: 0.6823
    class_weighting: 6.2478
    class_weighting: 7.3614
  }
  softmax_param {
    engine: CAFFE
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "conv_classifier"
  bottom: "label"
  top: "accuracy"
  top: "per_class_accuracy"
}
I0420 21:13:00.827106    32 layer_factory.hpp:77] Creating layer data
I0420 21:13:00.827129    32 net.cpp:100] Creating Layer data
I0420 21:13:00.827141    32 net.cpp:408] data -> data
I0420 21:13:00.827165    32 net.cpp:408] data -> label
I0420 21:13:00.827183    32 dense_image_data_layer.cpp:49] Opening file /SegNet/CamVid/train.txt
I0420 21:13:00.827605    32 dense_image_data_layer.cpp:59] Shuffling data
I0420 21:13:00.827723    32 dense_image_data_layer.cpp:64] A total of 367 examples.
I0420 21:13:00.838068    32 dense_image_data_layer.cpp:117] output data size: 4,3,360,480
I0420 21:13:00.844218    32 net.cpp:150] Setting up data
I0420 21:13:00.844275    32 net.cpp:157] Top shape: 4 3 360 480 (2073600)
I0420 21:13:00.844290    32 net.cpp:157] Top shape: 4 1 360 480 (691200)
I0420 21:13:00.844300    32 net.cpp:165] Memory required for data: 11059200
I0420 21:13:00.844316    32 layer_factory.hpp:77] Creating layer label_data_1_split
I0420 21:13:00.844350    32 net.cpp:100] Creating Layer label_data_1_split
I0420 21:13:00.844373    32 net.cpp:434] label_data_1_split <- label
I0420 21:13:00.844400    32 net.cpp:408] label_data_1_split -> label_data_1_split_0
I0420 21:13:00.844425    32 net.cpp:408] label_data_1_split -> label_data_1_split_1
I0420 21:13:00.844565    32 net.cpp:150] Setting up label_data_1_split
I0420 21:13:00.844588    32 net.cpp:157] Top shape: 4 1 360 480 (691200)
I0420 21:13:00.844660    32 net.cpp:157] Top shape: 4 1 360 480 (691200)
I0420 21:13:00.844677    32 net.cpp:165] Memory required for data: 16588800
I0420 21:13:00.844689    32 layer_factory.hpp:77] Creating layer norm
I0420 21:13:00.844713    32 net.cpp:100] Creating Layer norm
I0420 21:13:00.844725    32 net.cpp:434] norm <- data
I0420 21:13:00.844743    32 net.cpp:408] norm -> norm
I0420 21:13:00.845088    32 net.cpp:150] Setting up norm
I0420 21:13:00.845115    32 net.cpp:157] Top shape: 4 3 360 480 (2073600)
I0420 21:13:00.845125    32 net.cpp:165] Memory required for data: 24883200
I0420 21:13:00.845137    32 layer_factory.hpp:77] Creating layer conv1
I0420 21:13:00.845175    32 net.cpp:100] Creating Layer conv1
I0420 21:13:00.845193    32 net.cpp:434] conv1 <- norm
I0420 21:13:00.845211    32 net.cpp:408] conv1 -> conv1
I0420 21:13:00.847352    32 net.cpp:150] Setting up conv1
I0420 21:13:00.847388    32 net.cpp:157] Top shape: 4 64 360 480 (44236800)
I0420 21:13:00.847398    32 net.cpp:165] Memory required for data: 201830400
I0420 21:13:00.847425    32 layer_factory.hpp:77] Creating layer conv1_bn
I0420 21:13:00.847456    32 net.cpp:100] Creating Layer conv1_bn
I0420 21:13:00.847471    32 net.cpp:434] conv1_bn <- conv1
I0420 21:13:00.847494    32 net.cpp:395] conv1_bn -> conv1 (in-place)
I0420 21:13:00.849040    32 net.cpp:150] Setting up conv1_bn
I0420 21:13:00.849083    32 net.cpp:157] Top shape: 4 64 360 480 (44236800)
I0420 21:13:00.849094    32 net.cpp:165] Memory required for data: 378777600
I0420 21:13:00.849117    32 layer_factory.hpp:77] Creating layer relu1
I0420 21:13:00.849146    32 net.cpp:100] Creating Layer relu1
I0420 21:13:00.849159    32 net.cpp:434] relu1 <- conv1
I0420 21:13:00.849175    32 net.cpp:395] relu1 -> conv1 (in-place)
I0420 21:13:00.849515    32 net.cpp:150] Setting up relu1
I0420 21:13:00.849541    32 net.cpp:157] Top shape: 4 64 360 480 (44236800)
I0420 21:13:00.849552    32 net.cpp:165] Memory required for data: 555724800
I0420 21:13:00.849563    32 layer_factory.hpp:77] Creating layer pool1
I0420 21:13:00.849596    32 layer_factory.cpp:91] cuDNN does not support multiple tops. Using Caffe's own pooling layer.
I0420 21:13:00.849622    32 net.cpp:100] Creating Layer pool1
I0420 21:13:00.849634    32 net.cpp:434] pool1 <- conv1
I0420 21:13:00.849659    32 net.cpp:408] pool1 -> pool1
I0420 21:13:00.849678    32 net.cpp:408] pool1 -> pool1_mask
I0420 21:13:00.849776    32 net.cpp:150] Setting up pool1
I0420 21:13:00.849802    32 net.cpp:157] Top shape: 4 64 180 240 (11059200)
I0420 21:13:00.849815    32 net.cpp:157] Top shape: 4 64 180 240 (11059200)
I0420 21:13:00.849824    32 net.cpp:165] Memory required for data: 644198400
I0420 21:13:00.849838    32 layer_factory.hpp:77] Creating layer conv2
I0420 21:13:00.849864    32 net.cpp:100] Creating Layer conv2
I0420 21:13:00.849879    32 net.cpp:434] conv2 <- pool1
I0420 21:13:00.849897    32 net.cpp:408] conv2 -> conv2
I0420 21:13:00.854168    32 net.cpp:150] Setting up conv2
I0420 21:13:00.854200    32 net.cpp:157] Top shape: 4 64 180 240 (11059200)
I0420 21:13:00.854212    32 net.cpp:165] Memory required for data: 688435200
I0420 21:13:00.854236    32 layer_factory.hpp:77] Creating layer conv2_bn
I0420 21:13:00.854262    32 net.cpp:100] Creating Layer conv2_bn
I0420 21:13:00.854281    32 net.cpp:434] conv2_bn <- conv2
I0420 21:13:00.854300    32 net.cpp:395] conv2_bn -> conv2 (in-place)
I0420 21:13:00.854650    32 net.cpp:150] Setting up conv2_bn
I0420 21:13:00.854674    32 net.cpp:157] Top shape: 4 64 180 240 (11059200)
I0420 21:13:00.854689    32 net.cpp:165] Memory required for data: 732672000
I0420 21:13:00.854707    32 layer_factory.hpp:77] Creating layer relu2
I0420 21:13:00.854727    32 net.cpp:100] Creating Layer relu2
I0420 21:13:00.854738    32 net.cpp:434] relu2 <- conv2
I0420 21:13:00.854760    32 net.cpp:395] relu2 -> conv2 (in-place)
I0420 21:13:00.855124    32 net.cpp:150] Setting up relu2
I0420 21:13:00.855149    32 net.cpp:157] Top shape: 4 64 180 240 (11059200)
I0420 21:13:00.855159    32 net.cpp:165] Memory required for data: 776908800
I0420 21:13:00.855191    32 layer_factory.hpp:77] Creating layer pool2
I0420 21:13:00.855204    32 layer_factory.cpp:91] cuDNN does not support multiple tops. Using Caffe's own pooling layer.
I0420 21:13:00.855228    32 net.cpp:100] Creating Layer pool2
I0420 21:13:00.855250    32 net.cpp:434] pool2 <- conv2
I0420 21:13:00.855267    32 net.cpp:408] pool2 -> pool2
I0420 21:13:00.855285    32 net.cpp:408] pool2 -> pool2_mask
I0420 21:13:00.855401    32 net.cpp:150] Setting up pool2
I0420 21:13:00.855430    32 net.cpp:157] Top shape: 4 64 90 120 (2764800)
I0420 21:13:00.855443    32 net.cpp:157] Top shape: 4 64 90 120 (2764800)
I0420 21:13:00.855453    32 net.cpp:165] Memory required for data: 799027200
I0420 21:13:00.855463    32 layer_factory.hpp:77] Creating layer conv3
I0420 21:13:00.855489    32 net.cpp:100] Creating Layer conv3
I0420 21:13:00.855504    32 net.cpp:434] conv3 <- pool2
I0420 21:13:00.855523    32 net.cpp:408] conv3 -> conv3
I0420 21:13:00.859650    32 net.cpp:150] Setting up conv3
I0420 21:13:00.859696    32 net.cpp:157] Top shape: 4 64 90 120 (2764800)
I0420 21:13:00.859707    32 net.cpp:165] Memory required for data: 810086400
I0420 21:13:00.859732    32 layer_factory.hpp:77] Creating layer conv3_bn
I0420 21:13:00.859762    32 net.cpp:100] Creating Layer conv3_bn
I0420 21:13:00.859776    32 net.cpp:434] conv3_bn <- conv3
I0420 21:13:00.859796    32 net.cpp:395] conv3_bn -> conv3 (in-place)
I0420 21:13:00.860144    32 net.cpp:150] Setting up conv3_bn
I0420 21:13:00.860167    32 net.cpp:157] Top shape: 4 64 90 120 (2764800)
I0420 21:13:00.860177    32 net.cpp:165] Memory required for data: 821145600
I0420 21:13:00.860194    32 layer_factory.hpp:77] Creating layer relu3
I0420 21:13:00.860213    32 net.cpp:100] Creating Layer relu3
I0420 21:13:00.860232    32 net.cpp:434] relu3 <- conv3
I0420 21:13:00.860249    32 net.cpp:395] relu3 -> conv3 (in-place)
I0420 21:13:00.860456    32 net.cpp:150] Setting up relu3
I0420 21:13:00.860486    32 net.cpp:157] Top shape: 4 64 90 120 (2764800)
I0420 21:13:00.860496    32 net.cpp:165] Memory required for data: 832204800
I0420 21:13:00.860507    32 layer_factory.hpp:77] Creating layer pool3
I0420 21:13:00.860518    32 layer_factory.cpp:91] cuDNN does not support multiple tops. Using Caffe's own pooling layer.
I0420 21:13:00.860544    32 net.cpp:100] Creating Layer pool3
I0420 21:13:00.860558    32 net.cpp:434] pool3 <- conv3
I0420 21:13:00.860574    32 net.cpp:408] pool3 -> pool3
I0420 21:13:00.860592    32 net.cpp:408] pool3 -> pool3_mask
I0420 21:13:00.860680    32 net.cpp:150] Setting up pool3
I0420 21:13:00.860708    32 net.cpp:157] Top shape: 4 64 45 60 (691200)
I0420 21:13:00.860721    32 net.cpp:157] Top shape: 4 64 45 60 (691200)
I0420 21:13:00.860730    32 net.cpp:165] Memory required for data: 837734400
I0420 21:13:00.860741    32 layer_factory.hpp:77] Creating layer conv4
I0420 21:13:00.860764    32 net.cpp:100] Creating Layer conv4
I0420 21:13:00.860777    32 net.cpp:434] conv4 <- pool3
I0420 21:13:00.860796    32 net.cpp:408] conv4 -> conv4
I0420 21:13:00.864683    32 net.cpp:150] Setting up conv4
I0420 21:13:00.864711    32 net.cpp:157] Top shape: 4 64 45 60 (691200)
I0420 21:13:00.864720    32 net.cpp:165] Memory required for data: 840499200
I0420 21:13:00.864758    32 layer_factory.hpp:77] Creating layer conv4_bn
I0420 21:13:00.864796    32 net.cpp:100] Creating Layer conv4_bn
I0420 21:13:00.864820    32 net.cpp:434] conv4_bn <- conv4
I0420 21:13:00.864836    32 net.cpp:395] conv4_bn -> conv4 (in-place)
I0420 21:13:00.865105    32 net.cpp:150] Setting up conv4_bn
I0420 21:13:00.865128    32 net.cpp:157] Top shape: 4 64 45 60 (691200)
I0420 21:13:00.865139    32 net.cpp:165] Memory required for data: 843264000
I0420 21:13:00.865155    32 layer_factory.hpp:77] Creating layer relu4
I0420 21:13:00.865180    32 net.cpp:100] Creating Layer relu4
I0420 21:13:00.865192    32 net.cpp:434] relu4 <- conv4
I0420 21:13:00.865206    32 net.cpp:395] relu4 -> conv4 (in-place)
I0420 21:13:00.865526    32 net.cpp:150] Setting up relu4
I0420 21:13:00.865552    32 net.cpp:157] Top shape: 4 64 45 60 (691200)
I0420 21:13:00.865600    32 net.cpp:165] Memory required for data: 846028800
I0420 21:13:00.865614    32 layer_factory.hpp:77] Creating layer pool4
I0420 21:13:00.865627    32 layer_factory.cpp:91] cuDNN does not support multiple tops. Using Caffe's own pooling layer.
I0420 21:13:00.865644    32 net.cpp:100] Creating Layer pool4
I0420 21:13:00.865664    32 net.cpp:434] pool4 <- conv4
I0420 21:13:00.865681    32 net.cpp:408] pool4 -> pool4
I0420 21:13:00.865700    32 net.cpp:408] pool4 -> pool4_mask
I0420 21:13:00.865797    32 net.cpp:150] Setting up pool4
I0420 21:13:00.865826    32 net.cpp:157] Top shape: 4 64 23 30 (176640)
I0420 21:13:00.865840    32 net.cpp:157] Top shape: 4 64 23 30 (176640)
I0420 21:13:00.865851    32 net.cpp:165] Memory required for data: 847441920
I0420 21:13:00.865861    32 layer_factory.hpp:77] Creating layer upsample4
I0420 21:13:00.865882    32 net.cpp:100] Creating Layer upsample4
I0420 21:13:00.865897    32 net.cpp:434] upsample4 <- pool4
I0420 21:13:00.865909    32 net.cpp:434] upsample4 <- pool4_mask
I0420 21:13:00.865924    32 net.cpp:408] upsample4 -> upsample4
I0420 21:13:00.865949    32 upsample_layer.cpp:27] Params 'pad_out_{}_' are deprecated. Please declare upsample height and width useing the upsample_h, upsample_w parameters.
I0420 21:13:00.866000    32 net.cpp:150] Setting up upsample4
I0420 21:13:00.866021    32 net.cpp:157] Top shape: 4 64 45 60 (691200)
I0420 21:13:00.866031    32 net.cpp:165] Memory required for data: 850206720
I0420 21:13:00.866042    32 layer_factory.hpp:77] Creating layer conv_decode4
I0420 21:13:00.866072    32 net.cpp:100] Creating Layer conv_decode4
I0420 21:13:00.866093    32 net.cpp:434] conv_decode4 <- upsample4
I0420 21:13:00.866113    32 net.cpp:408] conv_decode4 -> conv_decode4
I0420 21:13:00.869870    32 net.cpp:150] Setting up conv_decode4
I0420 21:13:00.869897    32 net.cpp:157] Top shape: 4 64 45 60 (691200)
I0420 21:13:00.869910    32 net.cpp:165] Memory required for data: 852971520
I0420 21:13:00.869940    32 layer_factory.hpp:77] Creating layer conv_decode4_bn
I0420 21:13:00.869972    32 net.cpp:100] Creating Layer conv_decode4_bn
I0420 21:13:00.869987    32 net.cpp:434] conv_decode4_bn <- conv_decode4
I0420 21:13:00.870002    32 net.cpp:395] conv_decode4_bn -> conv_decode4 (in-place)
I0420 21:13:00.870321    32 net.cpp:150] Setting up conv_decode4_bn
I0420 21:13:00.870344    32 net.cpp:157] Top shape: 4 64 45 60 (691200)
I0420 21:13:00.870354    32 net.cpp:165] Memory required for data: 855736320
I0420 21:13:00.870371    32 layer_factory.hpp:77] Creating layer upsample3
I0420 21:13:00.870390    32 net.cpp:100] Creating Layer upsample3
I0420 21:13:00.870403    32 net.cpp:434] upsample3 <- conv_decode4
I0420 21:13:00.870424    32 net.cpp:434] upsample3 <- pool3_mask
I0420 21:13:00.870448    32 net.cpp:408] upsample3 -> upsample3
I0420 21:13:00.870466    32 upsample_layer.cpp:27] Params 'pad_out_{}_' are deprecated. Please declare upsample height and width useing the upsample_h, upsample_w parameters.
I0420 21:13:00.870517    32 net.cpp:150] Setting up upsample3
I0420 21:13:00.870537    32 net.cpp:157] Top shape: 4 64 90 120 (2764800)
I0420 21:13:00.870546    32 net.cpp:165] Memory required for data: 866795520
I0420 21:13:00.870558    32 layer_factory.hpp:77] Creating layer conv_decode3
I0420 21:13:00.870586    32 net.cpp:100] Creating Layer conv_decode3
I0420 21:13:00.870606    32 net.cpp:434] conv_decode3 <- upsample3
I0420 21:13:00.870627    32 net.cpp:408] conv_decode3 -> conv_decode3
I0420 21:13:00.874636    32 net.cpp:150] Setting up conv_decode3
I0420 21:13:00.874665    32 net.cpp:157] Top shape: 4 64 90 120 (2764800)
I0420 21:13:00.874675    32 net.cpp:165] Memory required for data: 877854720
I0420 21:13:00.874693    32 layer_factory.hpp:77] Creating layer conv_decode3_bn
I0420 21:13:00.874721    32 net.cpp:100] Creating Layer conv_decode3_bn
I0420 21:13:00.874745    32 net.cpp:434] conv_decode3_bn <- conv_decode3
I0420 21:13:00.874768    32 net.cpp:395] conv_decode3_bn -> conv_decode3 (in-place)
I0420 21:13:00.875079    32 net.cpp:150] Setting up conv_decode3_bn
I0420 21:13:00.875105    32 net.cpp:157] Top shape: 4 64 90 120 (2764800)
I0420 21:13:00.875114    32 net.cpp:165] Memory required for data: 888913920
I0420 21:13:00.875140    32 layer_factory.hpp:77] Creating layer upsample2
I0420 21:13:00.875167    32 net.cpp:100] Creating Layer upsample2
I0420 21:13:00.875183    32 net.cpp:434] upsample2 <- conv_decode3
I0420 21:13:00.875197    32 net.cpp:434] upsample2 <- pool2_mask
I0420 21:13:00.875214    32 net.cpp:408] upsample2 -> upsample2
I0420 21:13:00.875233    32 upsample_layer.cpp:27] Params 'pad_out_{}_' are deprecated. Please declare upsample height and width useing the upsample_h, upsample_w parameters.
I0420 21:13:00.875295    32 net.cpp:150] Setting up upsample2
I0420 21:13:00.875329    32 net.cpp:157] Top shape: 4 64 180 240 (11059200)
I0420 21:13:00.875339    32 net.cpp:165] Memory required for data: 933150720
I0420 21:13:00.875349    32 layer_factory.hpp:77] Creating layer conv_decode2
I0420 21:13:00.875375    32 net.cpp:100] Creating Layer conv_decode2
I0420 21:13:00.875393    32 net.cpp:434] conv_decode2 <- upsample2
I0420 21:13:00.875416    32 net.cpp:408] conv_decode2 -> conv_decode2
I0420 21:13:00.879415    32 net.cpp:150] Setting up conv_decode2
I0420 21:13:00.879443    32 net.cpp:157] Top shape: 4 64 180 240 (11059200)
I0420 21:13:00.879454    32 net.cpp:165] Memory required for data: 977387520
I0420 21:13:00.879472    32 layer_factory.hpp:77] Creating layer conv_decode2_bn
I0420 21:13:00.879494    32 net.cpp:100] Creating Layer conv_decode2_bn
I0420 21:13:00.879506    32 net.cpp:434] conv_decode2_bn <- conv_decode2
I0420 21:13:00.879526    32 net.cpp:395] conv_decode2_bn -> conv_decode2 (in-place)
I0420 21:13:00.879873    32 net.cpp:150] Setting up conv_decode2_bn
I0420 21:13:00.879896    32 net.cpp:157] Top shape: 4 64 180 240 (11059200)
I0420 21:13:00.879907    32 net.cpp:165] Memory required for data: 1021624320
I0420 21:13:00.879925    32 layer_factory.hpp:77] Creating layer upsample1
I0420 21:13:00.879946    32 net.cpp:100] Creating Layer upsample1
I0420 21:13:00.879967    32 net.cpp:434] upsample1 <- conv_decode2
I0420 21:13:00.879981    32 net.cpp:434] upsample1 <- pool1_mask
I0420 21:13:00.879997    32 net.cpp:408] upsample1 -> upsample1
I0420 21:13:00.880015    32 upsample_layer.cpp:27] Params 'pad_out_{}_' are deprecated. Please declare upsample height and width useing the upsample_h, upsample_w parameters.
I0420 21:13:00.880071    32 net.cpp:150] Setting up upsample1
I0420 21:13:00.880095    32 net.cpp:157] Top shape: 4 64 360 480 (44236800)
I0420 21:13:00.880105    32 net.cpp:165] Memory required for data: 1198571520
I0420 21:13:00.880115    32 layer_factory.hpp:77] Creating layer conv_decode1
I0420 21:13:00.880148    32 net.cpp:100] Creating Layer conv_decode1
I0420 21:13:00.880162    32 net.cpp:434] conv_decode1 <- upsample1
I0420 21:13:00.880183    32 net.cpp:408] conv_decode1 -> conv_decode1
I0420 21:13:00.884763    32 net.cpp:150] Setting up conv_decode1
I0420 21:13:00.884802    32 net.cpp:157] Top shape: 4 64 360 480 (44236800)
I0420 21:13:00.884814    32 net.cpp:165] Memory required for data: 1375518720
I0420 21:13:00.884835    32 layer_factory.hpp:77] Creating layer conv_decode1_bn
I0420 21:13:00.884869    32 net.cpp:100] Creating Layer conv_decode1_bn
I0420 21:13:00.884893    32 net.cpp:434] conv_decode1_bn <- conv_decode1
I0420 21:13:00.884912    32 net.cpp:395] conv_decode1_bn -> conv_decode1 (in-place)
I0420 21:13:00.886351    32 net.cpp:150] Setting up conv_decode1_bn
I0420 21:13:00.886379    32 net.cpp:157] Top shape: 4 64 360 480 (44236800)
I0420 21:13:00.886389    32 net.cpp:165] Memory required for data: 1552465920
I0420 21:13:00.886410    32 layer_factory.hpp:77] Creating layer conv_classifier
I0420 21:13:00.886440    32 net.cpp:100] Creating Layer conv_classifier
I0420 21:13:00.886461    32 net.cpp:434] conv_classifier <- conv_decode1
I0420 21:13:00.886487    32 net.cpp:408] conv_classifier -> conv_classifier
I0420 21:13:00.888295    32 net.cpp:150] Setting up conv_classifier
I0420 21:13:00.888337    32 net.cpp:157] Top shape: 4 11 360 480 (7603200)
I0420 21:13:00.888350    32 net.cpp:165] Memory required for data: 1582878720
I0420 21:13:00.888386    32 layer_factory.hpp:77] Creating layer conv_classifier_conv_classifier_0_split
I0420 21:13:00.888424    32 net.cpp:100] Creating Layer conv_classifier_conv_classifier_0_split
I0420 21:13:00.888440    32 net.cpp:434] conv_classifier_conv_classifier_0_split <- conv_classifier
I0420 21:13:00.888456    32 net.cpp:408] conv_classifier_conv_classifier_0_split -> conv_classifier_conv_classifier_0_split_0
I0420 21:13:00.888476    32 net.cpp:408] conv_classifier_conv_classifier_0_split -> conv_classifier_conv_classifier_0_split_1
I0420 21:13:00.888566    32 net.cpp:150] Setting up conv_classifier_conv_classifier_0_split
I0420 21:13:00.888589    32 net.cpp:157] Top shape: 4 11 360 480 (7603200)
I0420 21:13:00.888607    32 net.cpp:157] Top shape: 4 11 360 480 (7603200)
I0420 21:13:00.888617    32 net.cpp:165] Memory required for data: 1643704320
I0420 21:13:00.888629    32 layer_factory.hpp:77] Creating layer loss
I0420 21:13:00.888653    32 net.cpp:100] Creating Layer loss
I0420 21:13:00.888667    32 net.cpp:434] loss <- conv_classifier_conv_classifier_0_split_0
I0420 21:13:00.888680    32 net.cpp:434] loss <- label_data_1_split_0
I0420 21:13:00.888698    32 net.cpp:408] loss -> loss
I0420 21:13:00.888720    32 layer_factory.hpp:77] Creating layer loss
I0420 21:13:00.907694    32 net.cpp:150] Setting up loss
I0420 21:13:00.907763    32 net.cpp:157] Top shape: (1)
I0420 21:13:00.907774    32 net.cpp:160]     with loss weight 1
I0420 21:13:00.907801    32 net.cpp:165] Memory required for data: 1643704324
I0420 21:13:00.907816    32 layer_factory.hpp:77] Creating layer accuracy
I0420 21:13:00.907845    32 net.cpp:100] Creating Layer accuracy
I0420 21:13:00.907867    32 net.cpp:434] accuracy <- conv_classifier_conv_classifier_0_split_1
I0420 21:13:00.907886    32 net.cpp:434] accuracy <- label_data_1_split_1
I0420 21:13:00.907908    32 net.cpp:408] accuracy -> accuracy
I0420 21:13:00.907932    32 net.cpp:408] accuracy -> per_class_accuracy
I0420 21:13:00.908030    32 net.cpp:150] Setting up accuracy
I0420 21:13:00.908054    32 net.cpp:157] Top shape: (1)
I0420 21:13:00.908066    32 net.cpp:157] Top shape: 11 (11)
I0420 21:13:00.908074    32 net.cpp:165] Memory required for data: 1643704372
I0420 21:13:00.908085    32 net.cpp:228] accuracy does not need backward computation.
I0420 21:13:00.908098    32 net.cpp:226] loss needs backward computation.
I0420 21:13:00.908114    32 net.cpp:226] conv_classifier_conv_classifier_0_split needs backward computation.
I0420 21:13:00.908130    32 net.cpp:226] conv_classifier needs backward computation.
I0420 21:13:00.908144    32 net.cpp:226] conv_decode1_bn needs backward computation.
I0420 21:13:00.908155    32 net.cpp:226] conv_decode1 needs backward computation.
I0420 21:13:00.908166    32 net.cpp:226] upsample1 needs backward computation.
I0420 21:13:00.908179    32 net.cpp:226] conv_decode2_bn needs backward computation.
I0420 21:13:00.908190    32 net.cpp:226] conv_decode2 needs backward computation.
I0420 21:13:00.908200    32 net.cpp:226] upsample2 needs backward computation.
I0420 21:13:00.908211    32 net.cpp:226] conv_decode3_bn needs backward computation.
I0420 21:13:00.908221    32 net.cpp:226] conv_decode3 needs backward computation.
I0420 21:13:00.908231    32 net.cpp:226] upsample3 needs backward computation.
I0420 21:13:00.908243    32 net.cpp:226] conv_decode4_bn needs backward computation.
I0420 21:13:00.908254    32 net.cpp:226] conv_decode4 needs backward computation.
I0420 21:13:00.908267    32 net.cpp:226] upsample4 needs backward computation.
I0420 21:13:00.908278    32 net.cpp:226] pool4 needs backward computation.
I0420 21:13:00.908289    32 net.cpp:226] relu4 needs backward computation.
I0420 21:13:00.908299    32 net.cpp:226] conv4_bn needs backward computation.
I0420 21:13:00.908309    32 net.cpp:226] conv4 needs backward computation.
I0420 21:13:00.908319    32 net.cpp:226] pool3 needs backward computation.
I0420 21:13:00.908352    32 net.cpp:226] relu3 needs backward computation.
I0420 21:13:00.908365    32 net.cpp:226] conv3_bn needs backward computation.
I0420 21:13:00.908377    32 net.cpp:226] conv3 needs backward computation.
I0420 21:13:00.908387    32 net.cpp:226] pool2 needs backward computation.
I0420 21:13:00.908398    32 net.cpp:226] relu2 needs backward computation.
I0420 21:13:00.908408    32 net.cpp:226] conv2_bn needs backward computation.
I0420 21:13:00.908418    32 net.cpp:226] conv2 needs backward computation.
I0420 21:13:00.908428    32 net.cpp:226] pool1 needs backward computation.
I0420 21:13:00.908439    32 net.cpp:226] relu1 needs backward computation.
I0420 21:13:00.908448    32 net.cpp:226] conv1_bn needs backward computation.
I0420 21:13:00.908458    32 net.cpp:226] conv1 needs backward computation.
I0420 21:13:00.908469    32 net.cpp:228] norm does not need backward computation.
I0420 21:13:00.908486    32 net.cpp:228] label_data_1_split does not need backward computation.
I0420 21:13:00.908504    32 net.cpp:228] data does not need backward computation.
I0420 21:13:00.908522    32 net.cpp:270] This network produces output accuracy
I0420 21:13:00.908534    32 net.cpp:270] This network produces output loss
I0420 21:13:00.908545    32 net.cpp:270] This network produces output per_class_accuracy
I0420 21:13:00.908588    32 net.cpp:283] Network initialization done.
I0420 21:13:00.908753    32 solver.cpp:60] Solver scaffolding done.
I0420 21:13:00.910223    32 caffe.cpp:155] Finetuning from /SegNet/Models/segnet_weights_driving_webdemo.caffemodel
F0420 21:13:00.910310    32 io.cpp:54] Check failed: fd != -1 (-1 vs. -1) File not found: /SegNet/Models/segnet_weights_driving_webdemo.caffemodel
*** Check failure stack trace: ***
    @     0x7f851229c5cd  google::LogMessage::Fail()
    @     0x7f851229e433  google::LogMessage::SendToLog()
    @     0x7f851229c15b  google::LogMessage::Flush()
    @     0x7f851229ee1e  google::LogMessageFatal::~LogMessageFatal()
    @     0x7f85127f9c0c  caffe::ReadProtoFromBinaryFile()
    @     0x7f8512832226  caffe::ReadNetParamsFromBinaryFileOrDie()
    @     0x7f851284ceaa  caffe::Net<>::CopyTrainedLayersFromBinaryProto()
    @     0x7f851284cf4e  caffe::Net<>::CopyTrainedLayersFrom()
    @           0x40b944  CopyLayers()
    @           0x40ce89  train()
    @           0x4088d8  main
    @     0x7f85107af830  __libc_start_main
    @           0x4091a9  _start
    @              (nil)  (unknown)
